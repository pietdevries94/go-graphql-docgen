package cmd

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"path"

	"github.com/pietdevries94/go-graphql-docgen/config"
	"github.com/pietdevries94/go-graphql-docgen/generate"
	"github.com/pietdevries94/go-graphql-docgen/parser"
	"golang.org/x/tools/go/packages"
)

// const endpoint = "https://favware.tech/api"

func Execute() {
	cfg, err := config.LoadConfig()
	if err != nil {
		panic(err)
	}
	prepareOutputFolder(cfg.Output.Folder)

	parsed := parser.MustParse(cfg)

	schemaTypesBuf := newFileBuffer(cfg)
	generate.GenerateSchemaTypes(schemaTypesBuf, parsed, cfg.Scalars)
	writeFile(cfg.Output.Folder, "schemaTypes.go", schemaTypesBuf)

	queriesBuf := newFileBuffer(cfg)
	generate.GenerateQueries(queriesBuf, parsed)
	writeFile(cfg.Output.Folder, "queries.go", queriesBuf)

	cmd := exec.Command(`gofmt`, `-w`, cfg.Output.Folder)
	err = cmd.Run()
	if err != nil {
		log.Fatal("FATAL: gofmt failed")
	}
}

func newFileBuffer(cfg *config.Config) *bytes.Buffer {
	buf := bytes.NewBuffer(nil)
	fmt.Fprint(buf, "// Code generated by github.com/pietdevries94/go-graphql-docgen, DO NOT EDIT.\n\n")
	fmt.Fprintf(buf, "package %s\n\n", getPackageName(cfg))
	return buf
}

func writeFile(folder, name string, buf *bytes.Buffer) {
	fn := path.Join(folder, name)
	err := ioutil.WriteFile(fn, buf.Bytes(), 0644)
	if err != nil {
		panic(err)
	}
}

func prepareOutputFolder(folder string) {
	onErr := func(err error) {
		if err != nil {
			panic(err)
		}
	}

	err := os.MkdirAll(folder, 0755)
	onErr(err)

	removeFile := func(fn string) {
		e := os.RemoveAll(path.Join(folder, fn))
		onErr(e)
	}

	removeFile("queries.go")
	removeFile("schemaTypes.go")
}

func getPackageName(cfg *config.Config) string {
	if cfg.Output.Package != "" {
		return cfg.Output.Package
	}

	p, _ := packages.Load(&packages.Config{
		Dir: cfg.Output.Folder,
	}, ".")

	if len(p) > 1 {
		log.Fatalf("can't determine package of folder \"%s\", multiple packages", cfg.Output.Folder)
	}

	if len(p) == 1 {
		return p[0].Name
	}

	return path.Base(cfg.Output.Folder)
}
